Ideas:
	Conclusion from everything below:
		Based on everything done in here, it looks like any further work should be focused on:
		Cutting down on the number of integration tests - turn them into unit tests where possible.
		But be aware that the biggest culprit is NOT ExcelIntegration.
		In fact, the best ones to focus on are all the csv tests:
			ConsoleCatchallTests.Reconciliation.Files
			ConsoleCatchallTests.Reconciliation.ReconciliatorMatchingTests
		But all together the tests run in 11 seconds so maybe it's best to leave it for now.
		Note that some tests have prefixes, left over from a previous slow-test investigation:
			M_ means the test contains mocks
			R_ means the test contains a call to Reload
				- which is probably a source of slowness because it means a csv gets reloaded from disk.
	Argh:
		I just discovered that since I clicked Run Tests in Parallel, the two test projects are run in parallel!
			This means it is now irrelevant if Excel integration tests run slowly, because overall the other projects tests take longer.
			Individual tests within project are not run in parallel, which is why I didn't notice.
		Also, I misread seconds as milliseconds, and there are a couple of test sets in the main test project that also run slowly
			This is because they are in fact integration tests! The following sets of tests read/write csv files:
			ConsoleCatchallTests.Reconciliation.Files
			ConsoleCatchallTests.Reconciliation.ReconciliatorMatchingTests
	Are all these tests necessary? Can some of them be non-integration tests? 
		Check they run faster when they're not integration tests
	Bank record tests are slower - replace with cred card tests if possible.
	Why are nearly all the Bank record tests slower than the CredCard ones?
	Investigate the tests that have between 50 and 150ms 
	Have one shared spreadsheet used by both ExcelIntegrationTests and ExcelRecordTests.
	Try to minimise the number of worksheets that get opened.
		Try opening all sheets upfront, then you'll get a clearer view of which tests are genuinely slow.
		Similarly, can we have one test which definitely always gets run first, so we don't get random tests running apparently slowly?
	Think about which tests can be paralellised (currently none of them are)
	Move mocked methods out of integration tests project and back into ConsoleCatchallTests.
	For some reason, sometimes tests that use Mock<ISpreadsheetRepo> or Mock<ICellSet> run slowly - see below
		But it only ever seems to affect one test, so is not really worth investigating further.
		
Mechanics of Excel integration tests:
	The ExcelRecord tests are all in the same class (using partials to have a file per record type)
		That class (in ExcelRecordTests.cs) has one-time setup and tear-down methods which open/close the spreadsheet.
	The ExcelIntegrationTests class
		also has one-time setup and tear-down methods which open/close the spreadsheet. 
	Every sheet that's opened may add a one-time overhead, but then it's held open.

Commit b1642a7b18d2a23bc9384f18dd0f58ab800ae1ba:
	Initial state:
		ConsoleCatchallTests: 9 seconds
		ExcelIntegrationTests: 7 seconds
Commit cd52774799c3d03e9f21ab241a2793e5687c0932:
	Ignore all Excel tests > 100ms
		ExcelIntegrationTests now tests are ignored: 4 seconds
		Ignored the following slow tests:
			ExcelIntegrationTests:
				720ms: WillAppendAllRowsInCsvFileToSpecifiedWorksheet
				194ms: WillAppendCsvRecordToSpecifiedWorksheet
				907ms: WillAppendRowsToWorksheetOrderedByMatchedAndThenByDateAndIncludingDivider
				541ms: CanDeleteSpecifiedRows
				138ms: CanUpdateAmountAndTextIdentifiedByAmountCode
				127ms: CanUpdateAmountIdentifiedByAmountCode
				242ms: CanGetSubsetOfColumnsAsRowsConvertedToRecords
				250ms: CanInsertNewRow
				539ms: CanAppendNewRow
			BankRecordExcelTests (partial class of ExcelRecordTests):
				110ms: WillPopulateBankRecordCells
				125ms: WillInsertDividerTextInSecondCellWhenBankRecordIsDivider
				103ms: WillInsertNullInRelevantCellWhenBankRecordIsNotMatched
				379ms: M_WillAddMatchData_WhenPopulatingBankSpreadsheetRow
		New slow tests:
			ExcelIntegrationTests:
				294ms: CanFindFirstEmptyRowInColumnForSpecifiedSheet
				244ms: CanReadLastRowOfSpecifiedWorksheetAsObjectList
			CredCard1InOutRecordExcelTests (partial class of ExcelRecordTests):
				387ms: M_WillAddMatchData_WhenPopulatingCredCard1SpreadsheetRow
			BankRecordExcelTests (partial class of ExcelRecordTests):
				108ms: WillInsertXInCellWhenBankRecordIsMatched
					(was only just under 100ms before tests were ignored)
			Total: 1033 ms
	Without committing, I also ignored all three M_WillAddMatchData_WhenPopulating tests
		This just made another ExcelRecord test pop up at 357ms
		So presumably there is a price to pay of around 350ms when the spreadsheet is first opened for record tests.
	I went back to the version where no tests were ignored and saw that CanReadLastRowOfSpecifiedWorksheetAsObjectList was super fast.
		Maybe it's opening a particular worksheet, and that is also a slow operation 
		- so takes longer if it's not been opened by another test?
		That test is accessing TestSheetNames.CredCard, which is also accessed by one of the ignored tests (CanDeleteSpecifiedRows)
Commit dabf8ee285a85b41029cafd62af866b9065dfd01:
	Stop ignoring ExcelRecord tests
		because we know we have to have one slow test when the spreadsheet first fires up
		but we also want to investigate why so many tests run between 50ms and 150ms 
	Ran only the ExcelRecord tests and consistently got TWO tests with big times:
		528ms: M_WillAddMatchData_WhenPopulatingBankSpreadsheetRow
		410ms: WillInsertDividerTextInSecondCellWhenBankRecordIsDivider
	But when I run all the ExcelIntegrationTests at once, I go back to the previous situation - the only ExcelRecord test > 200ms:
		370ms: M_WillAddMatchData_WhenPopulatingBankSpreadsheetRow
	So somehow the other Excel tests are kind of warming things up, maybe by getting the spreadsheet open?
Commit 6d3d088c5741f9d0734f213e75a63263a5e97347:
	The three WillPopulateSourceLineWhenReadingFrom tests (as an example of tests that are slower for Bank than CredCard):
	Original times:
		43ms: BankRecord
		25ms: CredCard1
		23ms: CredCard2
	I commented out the stuff specific to BankRecord, CredCard2InOutRecord etc so all that was left was the spreadsheet stuff
	New times:
		40ms: BankRecord
		23ms: CredCard1
		29ms: CredCard2
	The only difference that I can see is that there are slightly more columns in the Bank sheet
	Now that I've commented out all the functional stuff I can edit the CredCard1 test to use the Bank sheet instead of CredCard:
	New times:
		First repetition:
			61ms: BankRecord
			47ms: CredCard1
			30ms: CredCard2
		Second repetition:
			200ms: BankRecord
			71ms: CredCard1
			49ms: CredCard2
		Third repetition:
			45ms: BankRecord
			40ms: CredCard1
			30ms: CredCard2
	Not consistent!
Commit 43ce253ddd6b1869d921002ff86b4b20e862183c:
	I added some more columns to the CredCard sheet in the spreadsheet to see if that made a difference.
	New times:		
		49ms: BankRecord
		45ms: CredCard1
		45ms: CredCard2
	I removed the newing up of the BankRecord / CredCard object, as that was the only thing left that differentiated between record types.
	New times:		
		First repetition:
			39ms: BankRecord
			49ms: CredCard1
			46ms: CredCard2
		Second repetition:
			38ms: BankRecord
			48ms: CredCard1
			41ms: CredCard2
	So it looks like maybe Bank records just ARE slower - partly cos number of columns, partly cos the class has more stuff in it?
	This could be a massive rabbit hole and it doesn't really matter so I'm abandoning this line of enquiry!
Between commits:
	I removed the non-parallesiable attribute on all tests and clicked the "run tests in parallel" button in Test Explorer
	Didn't make a blind bit of difference!
	Also it looked like it wasn't actually running them in parallel at all. [shrug]
Commit a32e346ab9e32a0f331b0b707208ad8ff88caa3b:
	Put spreadsheet creation and teardown into central TestHelper class
	This allows one open spreadsheet to be shared between ExcelIntegrationTests and ExcelRecordTests
	It didn't make any difference! M_WillAddMatchData_WhenPopulatingCredCard1SpreadsheetRow is till running at 350+ ms
	But then I had a revelation! M_WillAddMatchData_WhenPopulatingCredCard1SpreadsheetRow is using mocks!
Commit 32faa28f19ff3ca9cc4d10cd4e83a02fe4cab3b9:
	Ignored all three M_WillAddMatchData_WhenPopulating tests again.
	The one which ran slow was another mock-based test: M_WillPopulateActualBankRecordCells
		This test also uses Mock<ICellSet>
	So I ignored all the tests that used Mock<ICellSet>
		But now the one which ran slow was M_WillReadFromCredCard1RecordCells
		This doesn't use Mock<ICellSet> but it does use Mock<ISpreadsheetRepo>
		Tried ignoring this one too.
		Aha! Now no tests are running so slow (ie > 150ms).
	This is really weird, because I don't have the same mocking problem in ConsoleCatchallTests.
Commit 791cbee4436d8059da571a695c45488cb312d3d1:
	Moved the slow mocked tests to ConsoleCatchallTests to see if that project is different for some reason.
	The first mocked test still ran slowly!
	This made me look closer at ICellSet and ISpreadsheetRepo to see if there was something different about them.
	I found one thing: They both have methods that have parameters of type object.
	The only other interface that references anything of type object is ICellRow.
	ICellRow does get mocked in ConsoleCatchallTests (which, before I moved those mocked methods, didn't have ANY tests > 200ms)
	But ICellRow only has a function return of type object, no function parameters of type object.
Commit f25b2d5c58bf134736b03369a5f3fb8d23510478 
	So I gave ICellRow a function iwth a parameter of type object
	Huh? Now the previously-slow-running mocking methods I added before are running FASTER.
	And NOTHING is running at > 200ms
	Not even the tests that use Mock<ICellRow> (of which there are a few).
Commit 
	Removed the dummy ICellRow method again.
	Everything still speedy.
	I HAVE NO IDEA
	This is a rabbit hole. I need to just ignore and move on.
	
	